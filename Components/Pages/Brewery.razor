@page "/breweries"
@using SOA_CA1.Services
@inject BreweryService BreweryService

<h3>Breweries</h3>

<input type="text" @bind="searchText" placeholder="Search breweries by name..." />
<button @onclick="SearchBreweries">Search</button>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (filteredBreweries != null && filteredBreweries.Count > 0)
{
    <ul>
        @foreach (var brewery in filteredBreweries )
        {
            <li>
                <strong>@brewery.Name</strong> <br />
                Type: @brewery.BreweryType <br />
                Location: @brewery.City, @brewery.State, @brewery.Country <br />
                @if (!string.IsNullOrEmpty(brewery.WebsiteUrl))
                {
                    <span>URL: </span>
                    <a href="@brewery.WebsiteUrl" target="_blank">@brewery.WebsiteUrl</a>
                }
                <br /><br />
            </li>
        }
    </ul>
}
else if (breweries != null && breweries.Count == 0)
{
    <p>No breweries found.</p>
}

@code {
    private List<SOA_CA1.Brewery>? breweries;
    private List<SOA_CA1.Brewery>? filteredBreweries;
    private bool isLoading = false;
    private string searchText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        breweries = await BreweryService.GetAllBreweries();
        filteredBreweries = breweries; 
        isLoading = false;
    }

    private void SearchBreweries()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            filteredBreweries = breweries;
        }
        else
        {
            filteredBreweries = breweries
                .Where(b => b.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        StateHasChanged();
    }
}
